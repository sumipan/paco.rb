#!/usr/bin/env ruby

require 'rake'
require 'tmpdir'
require 'paco'
require 'zip'

task :setup do |task,args|
  module Paco
    pacofile = Dir.pwd + '/Pacofile'
    raise 'error. Pacofile not found' unless File.exist?(pacofile)

    eval File.read(pacofile)
  end
end

task :install do |task,args|
  Rake::Task[:setup].invoke
  env = Paco::Config.instance.env

  if ARGV[1] then
    file = ARGV[1]
    file = env.get_package_file file, Paco::Config.instance.repos
    env.install file
  else
    Paco::Config.instance.dependencies.each do |dependency|
      file = dependency.shift
      file = sprintf("%s-%s", file, dependency.shift) if dependency.size > 0
      file = env.get_package_file file, Paco::Config.instance.repos
      env.install file
    end
  end
end

task :build do |task,args|
  raise 'error.' if !ARGV[1] || !ARGV[1].match(/\.paco$/)

  Rake::Task[:setup].invoke

  spec = eval File.read(File.expand_path(ARGV[1]))
  env  = Paco::Config.instance.env

  files = env.build(spec)
  files.push spec.name + '.paco'

  zipfile = spec.path + '.zip'
  env.zip(zipfile, files)
end

task :test do |task,args|
  ENV['PACO_UNITY_PROJECT_PATH'] = ENV['PACO_TEST_PATH']
  Rake::Task[:cleanup].execute
  Paco::Config.instance.env.test
end

task :cleanup do |task,args|
  Rake::Task[:setup].invoke
  Paco::Config.instance.env.cleanup
end

desc 'help'
task :help do |task,args|
  puts <<HELP
[usage] peco <command> [<args>]

The most commonly used paco commands are:
   install  Install package
   build    Build package
   test     Test package
   help     Show help
HELP
end

# check task exist. show help unless found
task = ARGV[0]
begin
  Rake::Task[task]
rescue => e
  Rake::Task[:help].invoke
  exit 1
end

# execute task
Rake::Task[task].execute
