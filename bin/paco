#!/usr/bin/env ruby

require 'rake'
require 'tmpdir'
require 'paco'
require 'zip'

task :setup do |task,args|
  pacofile_path = Dir.pwd + '/.paco'
  if File.exist?(pacofile_path) then
    config = YAML.load(File.read(pacofile_path))
    if config['repository'] then
      @repository = Paco::Repository.factory(config['repository'])
    end
  end
end

task :install do |task,args|
  raise 'error.' if !ARGV[1]

  file = ARGV[1]

  Rake::Task[:setup].invoke

  env = Paco::Env::Unity.new
  env.get_package_file file, @repository
  env.install file
end

task :build do |task,args|
  raise 'error.' if !ARGV[1] || !ARGV[1].match(/\.paco$/)

  spec = eval File.read(File.expand_path(ARGV[1]))
  env  = Paco::Env::Unity.new

  files = env.build(spec)
  files.push spec.name + '.paco'

  zipfile = spec.path + '.zip'
  env.zip(zipfile, files)
end

desc 'test'
task :test do |task,args|
  Rake::Task[:cleanup].execute

  ENV['PACO_UNITY_PROJECT_PATH'] = ENV['PACO_TEST_PATH']
  Paco::Env::Unity.new.test
end

task :cleanup do |task,args|
  Paco::Env::Unity.new.cleanup
end

desc 'help'
task :help do |task,args|
  puts <<HELP
[usage] peco <command> [<args>]

The most commonly used paco commands are:
   install  Install package
   build    Build package
   test     Test package
   help     Show help
HELP
end

# check task exist. show help unless found
task = ARGV[0]
begin
  Rake::Task[task]
rescue => e
  Rake::Task[:help].invoke
  exit 1
end

ENV['PACO_TEST_PATH'] = Dir.tmpdir if !ENV['PACO_TEST_PATH']

# execute task
Rake::Task[task].execute
